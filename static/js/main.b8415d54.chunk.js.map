{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","shouldReverse","preparedGoods","sort","a","b","localeCompare","length","reverse","getPreparedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"uPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA+BK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAhCR,SACEC,EACAL,GAEC,IADDM,EACA,wDACMC,EAAa,YAAOF,GAoB1B,OAlBIL,GACFO,EAAcC,MAAK,SAACC,EAAGC,GACrB,MAAkB,SAAdV,EACKS,EAAEE,cAAcD,GAGP,WAAdV,EACKS,EAAEG,OAASF,EAAEE,OAGf,KAIPN,GACFC,EAAcM,UAGTN,EAOcO,CAAiBjB,EAAiBG,EAAWE,GAWlE,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,iBAAkB,CACtC,WAA0B,SAAdjB,IAEdkB,QAAS,kBAAMjB,EAAa,SAL9B,iCAUA,wBACEe,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,WAA0B,WAAdjB,IAEdkB,QAAS,kBAAMjB,EAAa,WAL9B,4BAUA,wBACEe,KAAK,SACLD,UAAWE,IAAW,oBAAqB,CACzC,YAAaf,IAEfgB,QArCc,WACpBf,GAAeD,IA+BX,qBAUe,KAAdF,GAAoBE,EACnB,wBACEc,KAAK,SACLD,UAAU,4BACVG,QA1CU,WAClBjB,EAAa,IACbE,GAAc,IAqCR,mBAOE,QAGN,6BACGC,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCxGnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b8415d54.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: string,\n  shouldReverse = false,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((a, b) => {\n      if (sortField === 'name') {\n        return a.localeCompare(b);\n      }\n\n      if (sortField === 'length') {\n        return a.length - b.length;\n      }\n\n      return 0;\n    });\n  }\n\n  if (shouldReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n\n  const handleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleReset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button is-info', {\n            'is-light': sortField !== 'name',\n          })}\n          onClick={() => setSortField('name')}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-success', {\n            'is-light': sortField !== 'length',\n          })}\n          onClick={() => setSortField('length')}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {sortField !== '' || isReversed ? (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        ) : null}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}